// Generated by Haxe 4.3.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["engine"] = $hx_exports["engine"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var engine_EngineMode = $hxEnums["engine.EngineMode"] = { __ename__:true,__constructs__:null
	,SINGLEPLAYER: {_hx_name:"SINGLEPLAYER",_hx_index:0,__enum__:"engine.EngineMode",toString:$estr}
	,SERVER: {_hx_name:"SERVER",_hx_index:1,__enum__:"engine.EngineMode",toString:$estr}
	,CLIENT_PREDICTION: {_hx_name:"CLIENT_PREDICTION",_hx_index:2,__enum__:"engine.EngineMode",toString:$estr}
};
engine_EngineMode.__constructs__ = [engine_EngineMode.SINGLEPLAYER,engine_EngineMode.SERVER,engine_EngineMode.CLIENT_PREDICTION];
var engine_NecrotonEngine = $hx_exports["engine"]["NecrotonEngine"] = function(config) {
	engine_NecrotonEngine.Config = config;
	this.state = new engine_model_GameModelState(engine_NecrotonEngine.Config.rngSeed);
	this.modules = new engine_modules_ModuleRegistry();
	this.eventBus = new engine_view_EventBus();
	this.snapshotManager = new engine_presenter_SnapshotManager(engine_NecrotonEngine.Config.snapshotBufferSize);
	this.running = false;
	this.setupModules();
	this.gameLoop = new engine_presenter_GameLoop(this.state,this.modules,this.eventBus);
};
engine_NecrotonEngine.__name__ = true;
engine_NecrotonEngine.create = function(config) {
	return new engine_NecrotonEngine(config);
};
engine_NecrotonEngine.main = function() {
	console.log("src/engine/NecrotonEngine.hx:104:","Necroton Engine compiled successfully");
};
engine_NecrotonEngine.prototype = {
	start: function() {
		this.running = true;
		this.gameLoop.start();
	}
	,stop: function() {
		this.running = false;
		this.gameLoop.stop();
	}
	,stopSimulation: function() {
		this.stop();
	}
	,step: function(dt) {
		this.stepFixed();
	}
	,queueInput: function(input) {
		var inputModule = js_Boot.__cast(this.modules.get("input") , engine_modules_InputModule);
		if(inputModule != null) {
			inputModule.queueInput(input);
		}
	}
	,spawnEntity: function(spec) {
		spec.id = this.state.allocateEntityId();
		var manager = this.state.managers.get(spec.type);
		if(manager != null) {
			var entity = manager.create(spec);
			this.eventBus.emit("entity:spawn",{ tick : this.state.tick, entityId : entity.id, type : entity.type, pos : entity.pos, ownerId : entity.ownerId});
			return entity.id;
		}
		return 0;
	}
	,despawnEntity: function(entityId) {
		var _g = 0;
		var _g1 = this.state.managers.getAll();
		while(_g < _g1.length) {
			var manager = _g1[_g];
			++_g;
			if(manager.find(entityId) != null) {
				this.eventBus.emit("entity:death",{ tick : this.state.tick, entityId : entityId, killerId : 0});
				manager.destroy(entityId);
				break;
			}
		}
	}
	,subscribeEvent: function(topic,handler) {
		return this.eventBus.subscribe(topic,handler);
	}
	,subscribeEventDynamic: function(topic,handler) {
		return this.eventBus.subscribeDynamic(topic,handler);
	}
	,unsubscribeEvent: function(token) {
		this.eventBus.unsubscribe(token);
	}
	,getSnapshot: function() {
		return this.state.saveMemento();
	}
	,getEventBus: function() {
		return this.eventBus;
	}
	,getInputModule: function() {
		return js_Boot.__cast(this.modules.get("input") , engine_modules_InputModule);
	}
	,getCharacterById: function(id) {
		return this.state.managers.get("character").find(id);
	}
	,getColliderById: function(id) {
		return this.state.managers.get("collider").find(id);
	}
	,getCurrentTick: function() {
		return this.state.tick;
	}
	,getAllEntities: function() {
		var entities = [];
		var _g = 0;
		var _g1 = this.state.managers.getAll();
		while(_g < _g1.length) _g1[_g++].iterate(function(entity) {
			entities.push(entity);
		});
		return entities;
	}
	,rollbackAndReplay: function(anchorTick,pendingInputs) {
		var anchorMemento = this.snapshotManager.load(anchorTick);
		if(anchorMemento == null) {
			console.log("src/engine/NecrotonEngine.hx:303:","Warning: No snapshot found for anchor tick " + anchorTick);
			return;
		}
		this.state.restoreMemento(anchorMemento);
		var _g = 0;
		while(_g < pendingInputs.length) {
			var input = pendingInputs[_g];
			++_g;
			if(input.intendedServerTick > anchorTick) {
				this.queueInput(input);
			}
		}
		var currentTick = this.state.tick;
		while(this.state.tick < currentTick) this.gameLoop.stepFixed();
		this.emitCorrectionEvents();
	}
	,stepFixed: function() {
		this.gameLoop.stepFixed();
		this.snapshotManager.store(this.state.tick,this.state.saveMemento());
		this.emitSnapshotEvents();
	}
	,setupModules: function() {
		var physicsModule = new engine_modules_PhysicsModule();
		var aiModule = new engine_modules_AIModule();
		var spawnModule = new engine_modules_SpawnModule();
		this.modules.register("input",new engine_modules_InputModule());
		this.modules.register("physics",physicsModule);
		this.modules.register("ai",aiModule);
		this.modules.register("spawn",spawnModule);
	}
	,emitSnapshotEvents: function() {
		switch(engine_NecrotonEngine.Config.mode._hx_index) {
		case 0:
			break;
		case 1:
			if(this.state.tick % engine_NecrotonEngine.Config.snapshotEmissionInterval == 0) {
				this.eventBus.emit("snapshot",{ tick : this.state.tick, serializedState : this.state.saveMemento()});
			}
			break;
		case 2:
			this.eventBus.emit("snapshot",{ tick : this.state.tick, serializedState : this.state.saveMemento()});
			break;
		}
	}
	,emitCorrectionEvents: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.state.managers.getAll();
		while(_g < _g1.length) _g1[_g++].iterate(function(entity) {
			_gthis.eventBus.emit("entity:correction",{ tick : _gthis.state.tick, entityId : entity.id, correctedPos : entity.pos, correctedVel : entity.vel});
		});
	}
	,__class__: engine_NecrotonEngine
};
var engine_geometry_RectUtils = function() { };
engine_geometry_RectUtils.__name__ = true;
engine_geometry_RectUtils.create = function(x,y,width,height) {
	return { x : x, y : y, width : width, height : height};
};
engine_geometry_RectUtils.fromMinMax = function(minX,minY,maxX,maxY) {
	return { x : (minX + maxX) / 2, y : (minY + maxY) / 2, width : maxX - minX, height : maxY - minY};
};
engine_geometry_RectUtils.getBounds = function(rect) {
	var halfWidth = rect.width / 2;
	var halfHeight = rect.height / 2;
	return { minX : rect.x - halfWidth | 0, minY : rect.y - halfHeight | 0, maxX : rect.x + halfWidth | 0, maxY : rect.y + halfHeight | 0};
};
engine_geometry_RectUtils.contains = function(rect,point) {
	var bounds = engine_geometry_RectUtils.getBounds(rect);
	if(point.x >= bounds.minX && point.x <= bounds.maxX && point.y >= bounds.minY) {
		return point.y <= bounds.maxY;
	} else {
		return false;
	}
};
engine_geometry_RectUtils.intersectsRect = function(rectA,rectB) {
	var boundsA = engine_geometry_RectUtils.getBounds(rectA);
	var boundsB = engine_geometry_RectUtils.getBounds(rectB);
	if(boundsA.minX < boundsB.maxX && boundsA.maxX > boundsB.minX && boundsA.minY < boundsB.maxY) {
		return boundsA.maxY > boundsB.minY;
	} else {
		return false;
	}
};
engine_geometry_RectUtils.intersectsLine = function(rect,lineStart,lineEnd) {
	var bounds = engine_geometry_RectUtils.getBounds(rect);
	var dx = lineEnd.x - lineStart.x;
	var dy = lineEnd.y - lineStart.y;
	if(dx == 0) {
		if(lineStart.x >= bounds.minX && lineStart.x <= bounds.maxX) {
			if(!(lineStart.y >= bounds.minY && lineStart.y <= bounds.maxY || lineEnd.y >= bounds.minY && lineEnd.y <= bounds.maxY)) {
				if(lineStart.y < bounds.minY) {
					return lineEnd.y > bounds.maxY;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	if(dy == 0) {
		if(lineStart.y >= bounds.minY && lineStart.y <= bounds.maxY) {
			if(!(lineStart.x >= bounds.minX && lineStart.x <= bounds.maxX || lineEnd.x >= bounds.minX && lineEnd.x <= bounds.maxX)) {
				if(lineStart.x < bounds.minX) {
					return lineEnd.x > bounds.maxX;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	var t0 = 0.0;
	var t1 = 1.0;
	var p_0 = -dx;
	var p_2 = -dy;
	var q_0 = lineStart.x - bounds.minX;
	var q_1 = bounds.maxX - lineStart.x;
	var q_2 = lineStart.y - bounds.minY;
	var q_3 = bounds.maxY - lineStart.y;
	if(p_0 == 0) {
		if(q_0 < 0) {
			return false;
		}
	} else {
		var t = q_0 / p_0;
		if(p_0 < 0) {
			if(t > 1.0) {
				return false;
			}
			if(t > 0.0) {
				t0 = t;
			}
		} else {
			if(t < 0.0) {
				return false;
			}
			if(t < 1.0) {
				t1 = t;
			}
		}
	}
	if(dx == 0) {
		if(q_1 < 0) {
			return false;
		}
	} else {
		var t = q_1 / dx;
		if(dx < 0) {
			if(t > t1) {
				return false;
			}
			if(t > t0) {
				t0 = t;
			}
		} else {
			if(t < t0) {
				return false;
			}
			if(t < t1) {
				t1 = t;
			}
		}
	}
	if(p_2 == 0) {
		if(q_2 < 0) {
			return false;
		}
	} else {
		var t = q_2 / p_2;
		if(p_2 < 0) {
			if(t > t1) {
				return false;
			}
			if(t > t0) {
				t0 = t;
			}
		} else {
			if(t < t0) {
				return false;
			}
			if(t < t1) {
				t1 = t;
			}
		}
	}
	if(dy == 0) {
		if(q_3 < 0) {
			return false;
		}
	} else {
		var t = q_3 / dy;
		if(dy < 0) {
			if(t > t1) {
				return false;
			}
			if(t > t0) {
				t0 = t;
			}
		} else {
			if(t < t0) {
				return false;
			}
			if(t < t1) {
				t1 = t;
			}
		}
	}
	return t0 <= t1;
};
engine_geometry_RectUtils.intersectsCircle = function(rect,circleCenter,radius) {
	var bounds = engine_geometry_RectUtils.getBounds(rect);
	var dx = circleCenter.x - Math.max(bounds.minX,Math.min(circleCenter.x,bounds.maxX));
	var dy = circleCenter.y - Math.max(bounds.minY,Math.min(circleCenter.y,bounds.maxY));
	return dx * dx + dy * dy <= radius * radius;
};
engine_geometry_RectUtils.getIntersectionDepth = function(rectA,rectB) {
	var boundsA = engine_geometry_RectUtils.getBounds(rectA);
	var boundsB = engine_geometry_RectUtils.getBounds(rectB);
	var overlapX = Math.min(boundsA.maxX,boundsB.maxX) - Math.max(boundsA.minX,boundsB.minX);
	var overlapY = Math.min(boundsA.maxY,boundsB.maxY) - Math.max(boundsA.minY,boundsB.minY);
	if(overlapX < overlapY) {
		return { x : overlapX * (boundsA.minX < boundsB.minX ? -1 : 1) | 0, y : 0};
	} else {
		return { x : 0, y : overlapY * (boundsA.minY < boundsB.minY ? -1 : 1) | 0};
	}
};
engine_geometry_RectUtils.getArea = function(rect) {
	return rect.width * rect.height;
};
engine_geometry_RectUtils.isValid = function(rect) {
	if(rect.width > 0) {
		return rect.height > 0;
	} else {
		return false;
	}
};
var engine_geometry_Vec2Utils = function() { };
engine_geometry_Vec2Utils.__name__ = true;
engine_geometry_Vec2Utils.create = function(x,y) {
	return { x : x, y : y};
};
engine_geometry_Vec2Utils.add = function(a,b) {
	return { x : a.x + b.x, y : a.y + b.y};
};
engine_geometry_Vec2Utils.sub = function(a,b) {
	return { x : a.x - b.x, y : a.y + b.y};
};
engine_geometry_Vec2Utils.scale = function(v,s) {
	return { x : v.x * s | 0, y : v.y * s | 0};
};
engine_geometry_Vec2Utils.$length = function(v) {
	return Math.sqrt(v.x * v.x + v.y * v.y) | 0;
};
engine_geometry_Vec2Utils.normalize = function(v) {
	var len = engine_geometry_Vec2Utils.$length(v);
	if(len == 0) {
		return { x : 0, y : 0};
	}
	return { x : v.x / len | 0, y : v.y / len | 0};
};
engine_geometry_Vec2Utils.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
engine_geometry_Vec2Utils.clone = function(v) {
	return { x : v.x, y : v.y};
};
engine_geometry_Vec2Utils.distanceSquared = function(a,b) {
	var dx = a.x - b.x;
	var dy = a.y - b.y;
	return dx * dx + dy * dy;
};
var engine_model_DeterministicRng = function(seed) {
	this.seed = seed;
	this.state = seed;
};
engine_model_DeterministicRng.__name__ = true;
engine_model_DeterministicRng.prototype = {
	nextInt: function() {
		this.state = this.state * 1103515245 + 12345 & 2147483647;
		return this.state;
	}
	,nextFloat: function() {
		return this.nextInt() / 2147483647.0;
	}
	,nextFloatRange: function(min,max) {
		return min + this.nextFloat() * (max - min);
	}
	,nextIntRange: function(min,max) {
		return min + this.nextInt() % (max - min);
	}
	,clone: function() {
		var cloned = new engine_model_DeterministicRng(this.seed);
		cloned.state = this.state;
		return cloned;
	}
	,serialize: function() {
		return { seed : this.seed, state : this.state};
	}
	,deserialize: function(data) {
		this.seed = data.seed;
		this.state = data.state;
	}
	,__class__: engine_model_DeterministicRng
};
var engine_model_GameModelState = function(seed) {
	this.tick = 0;
	this.nextEntityId = 1;
	this.rng = new engine_model_DeterministicRng(seed);
	this.transientColliders = [];
	this.objectPool = new engine_model_ObjectPool();
	this.entityFactory = new engine_model_entities_base_EngineEntityFactory(this.objectPool);
	this.managers = new engine_model_managers_EngineEntityManagerRegistry();
	this.setupManagers();
};
engine_model_GameModelState.__name__ = true;
engine_model_GameModelState.prototype = {
	allocateEntityId: function() {
		return this.nextEntityId++;
	}
	,saveMemento: function() {
		return { tick : this.tick, nextEntityId : this.nextEntityId, rng : this.rng.serialize(), transientColliders : this.transientColliders, managers : this.managers.saveMemento()};
	}
	,restoreMemento: function(memento) {
		this.tick = memento.tick;
		this.nextEntityId = memento.nextEntityId;
		this.rng.deserialize(memento.rng);
		this.transientColliders = memento.transientColliders;
		this.managers.restoreMemento(memento.managers);
	}
	,getCharacterManager: function() {
		return this.managers.get("character");
	}
	,getConsumableManager: function() {
		return this.managers.get("consumable");
	}
	,getEffectManager: function() {
		return this.managers.get("effect");
	}
	,getColliderManager: function() {
		return this.managers.get("collider");
	}
	,setupManagers: function() {
		this.managers.register("character",new engine_model_managers_BaseEngineEntityManager(this.entityFactory));
		this.managers.register("consumable",new engine_model_managers_BaseEngineEntityManager(this.entityFactory));
		this.managers.register("effect",new engine_model_managers_BaseEngineEntityManager(this.entityFactory));
		this.managers.register("collider",new engine_model_managers_BaseEngineEntityManager(this.entityFactory));
	}
	,__class__: engine_model_GameModelState
};
var engine_model_ObjectPool = function() {
	this.pools = new haxe_ds_StringMap();
};
engine_model_ObjectPool.__name__ = true;
engine_model_ObjectPool.prototype = {
	prewarm: function(kind,count,factory) {
		if(!Object.prototype.hasOwnProperty.call(this.pools.h,kind)) {
			this.pools.h[kind] = [];
		}
		var pool = this.pools.h[kind];
		var _g = 0;
		while(_g < count) {
			++_g;
			pool.push(factory());
		}
	}
	,acquire: function(kind,factory) {
		if(!Object.prototype.hasOwnProperty.call(this.pools.h,kind)) {
			this.pools.h[kind] = [];
		}
		var pool = this.pools.h[kind];
		if(pool.length > 0) {
			return pool.pop();
		}
		return factory();
	}
	,release: function(kind,obj) {
		if(!Object.prototype.hasOwnProperty.call(this.pools.h,kind)) {
			this.pools.h[kind] = [];
		}
		obj.reset({ id : 0, type : kind, pos : { x : 0, y : 0}, vel : { x : 0, y : 0}, rotation : 0, ownerId : "", isAlive : false});
		this.pools.h[kind].push(obj);
	}
	,__class__: engine_model_ObjectPool
};
var engine_model_entities_base_AbstractEngineEntity = function() { };
engine_model_entities_base_AbstractEngineEntity.__name__ = true;
engine_model_entities_base_AbstractEngineEntity.prototype = {
	__class__: engine_model_entities_base_AbstractEngineEntity
};
var engine_model_entities_base_BaseEngineEntity = function() {
	this.movementCorrection = engine_geometry_Vec2Utils.create(0,0);
	this.reset(null);
};
engine_model_entities_base_BaseEngineEntity.__name__ = true;
engine_model_entities_base_BaseEngineEntity.__super__ = engine_model_entities_base_AbstractEngineEntity;
engine_model_entities_base_BaseEngineEntity.prototype = $extend(engine_model_entities_base_AbstractEngineEntity.prototype,{
	serialize: function() {
		return { id : this.id, type : this.type, pos : { x : this.pos.x, y : this.pos.y}, vel : { x : this.vel.x, y : this.vel.y}, rotation : this.rotation, ownerId : this.ownerId, isAlive : this.isAlive, isInputDriven : this.isInputDriven, colliderWidth : this.colliderWidth, colliderHeight : this.colliderHeight};
	}
	,deserialize: function(data) {
		this.id = data.id;
		this.type = data.type;
		this.pos = { x : data.pos.x, y : data.pos.y};
		this.vel = { x : data.vel.x, y : data.vel.y};
		this.rotation = data.rotation;
		this.ownerId = data.ownerId;
		this.isAlive = data.isAlive;
		this.isInputDriven = data.isInputDriven != null && data.isInputDriven;
		this.colliderWidth = data.colliderWidth != null ? data.colliderWidth : 1;
		this.colliderHeight = data.colliderHeight != null ? data.colliderHeight : 1;
	}
	,reset: function(spec) {
		if(spec == null) {
			this.id = 0;
			this.type = "generic";
			this.pos = engine_geometry_Vec2Utils.create(0,0);
			this.vel = engine_geometry_Vec2Utils.create(0,0);
			this.rotation = 0;
			this.ownerId = "";
			this.isAlive = false;
			this.isInputDriven = false;
			this.colliderWidth = 1;
			this.colliderHeight = 1;
			return;
		}
		this.id = spec.id != null ? spec.id : 0;
		this.type = spec.type != null ? spec.type : "generic";
		this.pos = spec.pos != null ? { x : spec.pos.x, y : spec.pos.y} : engine_geometry_Vec2Utils.create(0,0);
		this.vel = spec.vel != null ? { x : spec.vel.x, y : spec.vel.y} : engine_geometry_Vec2Utils.create(0,0);
		this.rotation = spec.rotation != null ? spec.rotation : 0;
		this.ownerId = spec.ownerId != null ? spec.ownerId : "";
		this.isAlive = spec.isAlive != null ? spec.isAlive : true;
		this.isInputDriven = spec.isInputDriven != null && spec.isInputDriven;
		this.colliderWidth = spec.colliderWidth != null ? spec.colliderWidth : 1;
		this.colliderHeight = spec.colliderHeight != null ? spec.colliderHeight : 1;
	}
	,applyMovementCorrection: function(correction) {
		this.movementCorrection = correction;
	}
	,clearMovementCorrection: function() {
		this.movementCorrection = engine_geometry_Vec2Utils.create(0,0);
	}
	,__class__: engine_model_entities_base_BaseEngineEntity
});
var engine_model_entities_base_EngineEntityFactory = function(pool) {
	this.pool = pool;
	this.factories = new haxe_ds_StringMap();
	this.registerCoreTypes();
};
engine_model_entities_base_EngineEntityFactory.__name__ = true;
engine_model_entities_base_EngineEntityFactory.prototype = {
	register: function(type,factory) {
		this.factories.h[type] = factory;
	}
	,create: function(type,spec) {
		console.log("src/engine/model/entities/base/EngineEntityFactory.hx:43:","Creating entity of type: " + type);
		if(!Object.prototype.hasOwnProperty.call(this.factories.h,type)) {
			throw haxe_Exception.thrown("Unknown entity type: " + type);
		}
		var entity = this.pool.acquire(type,this.factories.h[type]);
		entity.reset(spec);
		return entity;
	}
	,release: function(entity) {
		this.pool.release(entity.type,entity);
	}
	,registerCoreTypes: function() {
		this.register("character",function() {
			return new engine_model_entities_impl_EngineCharacterEntity();
		});
		this.register("consumable",function() {
			return new engine_model_entities_impl_EngineConsumableEntity();
		});
		this.register("effect",function() {
			return new engine_model_entities_impl_EngineEffectEntity();
		});
		this.register("collider",function() {
			return new engine_model_entities_impl_EngineColliderEntity();
		});
	}
	,__class__: engine_model_entities_base_EngineEntityFactory
};
var engine_model_entities_impl_EngineCharacterEntity = function() {
	engine_model_entities_base_BaseEngineEntity.call(this);
};
engine_model_entities_impl_EngineCharacterEntity.__name__ = true;
engine_model_entities_impl_EngineCharacterEntity.__super__ = engine_model_entities_base_BaseEngineEntity;
engine_model_entities_impl_EngineCharacterEntity.prototype = $extend(engine_model_entities_base_BaseEngineEntity.prototype,{
	serialize: function() {
		var base = engine_model_entities_base_BaseEngineEntity.prototype.serialize.call(this);
		base.maxHp = this.maxHp;
		base.hp = this.hp;
		base.level = this.level;
		base.stats = this.stats;
		base.attackDefs = this.attackDefs;
		base.spellBook = this.spellBook;
		base.aiProfile = this.aiProfile;
		return base;
	}
	,deserialize: function(data) {
		engine_model_entities_base_BaseEngineEntity.prototype.deserialize.call(this,data);
		this.maxHp = data.maxHp;
		this.hp = data.hp;
		this.level = data.level;
		this.stats = data.stats;
		this.attackDefs = data.attackDefs;
		this.spellBook = data.spellBook;
		this.aiProfile = data.aiProfile;
	}
	,reset: function(spec) {
		engine_model_entities_base_BaseEngineEntity.prototype.reset.call(this,spec);
		if(spec == null) {
			this.maxHp = 100;
			this.hp = this.maxHp;
			this.level = 1;
			this.stats = { };
			this.attackDefs = [];
			this.spellBook = [];
			this.aiProfile = "";
			this.colliderWidth = 3;
			this.colliderHeight = 5;
			this.isInputDriven = true;
			return;
		}
		this.maxHp = spec.maxHp != null ? spec.maxHp : 100;
		this.hp = spec.hp != null ? spec.hp : this.maxHp;
		this.level = spec.level != null ? spec.level : 1;
		this.stats = spec.stats != null ? spec.stats : { };
		this.attackDefs = spec.attackDefs != null ? spec.attackDefs : [];
		this.spellBook = spec.spellBook != null ? spec.spellBook : [];
		this.aiProfile = spec.aiProfile != null ? spec.aiProfile : "";
		if(spec.colliderWidth == null) {
			this.colliderWidth = 3;
		}
		if(spec.colliderHeight == null) {
			this.colliderHeight = 5;
		}
		this.isInputDriven = spec.isInputDriven != null ? spec.isInputDriven : true;
	}
	,applyMovementStep: function(movementX,movementY,dt) {
		var movementStep = engine_geometry_Vec2Utils.add(this.calculateMovementStep(movementX,movementY,dt),this.movementCorrection);
		this.pos.x += movementStep.x;
		this.pos.y += movementStep.y;
		this.vel.x = 0;
		this.vel.y = 0;
		this.clearMovementCorrection();
	}
	,calculateMovementStep: function(movementX,movementY,dt) {
		var speed = (this.stats != null && this.stats.speed != null ? this.stats.speed : 1.0) * engine_NecrotonEngine.Config.unitPixels;
		return { x : movementX * speed * dt | 0, y : movementY * speed * dt | 0};
	}
	,__class__: engine_model_entities_impl_EngineCharacterEntity
});
var engine_model_entities_impl_EngineColliderEntity = function() {
	engine_model_entities_base_BaseEngineEntity.call(this);
};
engine_model_entities_impl_EngineColliderEntity.__name__ = true;
engine_model_entities_impl_EngineColliderEntity.__super__ = engine_model_entities_base_BaseEngineEntity;
engine_model_entities_impl_EngineColliderEntity.prototype = $extend(engine_model_entities_base_BaseEngineEntity.prototype,{
	serialize: function() {
		var base = engine_model_entities_base_BaseEngineEntity.prototype.serialize.call(this);
		base.passable = this.passable;
		base.isTrigger = this.isTrigger;
		return base;
	}
	,deserialize: function(data) {
		engine_model_entities_base_BaseEngineEntity.prototype.deserialize.call(this,data);
		this.passable = data.passable != null && data.passable;
		this.isTrigger = data.isTrigger != null && data.isTrigger;
	}
	,reset: function(spec) {
		engine_model_entities_base_BaseEngineEntity.prototype.reset.call(this,spec);
		if(spec == null) {
			this.passable = false;
			this.isTrigger = false;
			this.isInputDriven = false;
			this.vel.x = 0;
			this.vel.y = 0;
			this.colliderWidth = 1;
			this.colliderHeight = 1;
			return;
		}
		this.passable = spec.passable != null && spec.passable;
		this.isTrigger = spec.isTrigger != null && spec.isTrigger;
		this.isInputDriven = false;
		this.vel.x = 0;
		this.vel.y = 0;
		this.colliderWidth = spec.colliderWidth != null ? spec.colliderWidth : 1;
		this.colliderHeight = spec.colliderHeight != null ? spec.colliderHeight : 1;
	}
	,__class__: engine_model_entities_impl_EngineColliderEntity
});
var engine_model_entities_impl_EngineConsumableEntity = function() {
	engine_model_entities_base_BaseEngineEntity.call(this);
};
engine_model_entities_impl_EngineConsumableEntity.__name__ = true;
engine_model_entities_impl_EngineConsumableEntity.__super__ = engine_model_entities_base_BaseEngineEntity;
engine_model_entities_impl_EngineConsumableEntity.prototype = $extend(engine_model_entities_base_BaseEngineEntity.prototype,{
	serialize: function() {
		var base = engine_model_entities_base_BaseEngineEntity.prototype.serialize.call(this);
		base.effectId = this.effectId;
		base.durationTicks = this.durationTicks;
		base.stackable = this.stackable;
		base.charges = this.charges;
		base.useRange = this.useRange;
		return base;
	}
	,deserialize: function(data) {
		engine_model_entities_base_BaseEngineEntity.prototype.deserialize.call(this,data);
		this.effectId = data.effectId;
		this.durationTicks = data.durationTicks;
		this.stackable = data.stackable;
		this.charges = data.charges;
		this.useRange = data.useRange;
	}
	,reset: function(spec) {
		engine_model_entities_base_BaseEngineEntity.prototype.reset.call(this,spec);
		this.effectId = spec.effectId != null ? spec.effectId : "";
		this.durationTicks = spec.durationTicks != null ? spec.durationTicks : 0;
		this.stackable = spec.stackable != null && spec.stackable;
		this.charges = spec.charges != null ? spec.charges : 1;
		this.useRange = spec.useRange != null ? spec.useRange : 16;
	}
	,__class__: engine_model_entities_impl_EngineConsumableEntity
});
var engine_model_entities_impl_EngineEffectEntity = function() {
	engine_model_entities_base_BaseEngineEntity.call(this);
};
engine_model_entities_impl_EngineEffectEntity.__name__ = true;
engine_model_entities_impl_EngineEffectEntity.__super__ = engine_model_entities_base_BaseEngineEntity;
engine_model_entities_impl_EngineEffectEntity.prototype = $extend(engine_model_entities_base_BaseEngineEntity.prototype,{
	serialize: function() {
		var base = engine_model_entities_base_BaseEngineEntity.prototype.serialize.call(this);
		base.effectType = this.effectType;
		base.durationTicks = this.durationTicks;
		base.intensity = this.intensity;
		base.targetId = this.targetId;
		base.casterId = this.casterId;
		return base;
	}
	,deserialize: function(data) {
		engine_model_entities_base_BaseEngineEntity.prototype.deserialize.call(this,data);
		this.effectType = data.effectType;
		this.durationTicks = data.durationTicks;
		this.intensity = data.intensity;
		this.targetId = data.targetId;
		this.casterId = data.casterId;
	}
	,reset: function(spec) {
		engine_model_entities_base_BaseEngineEntity.prototype.reset.call(this,spec);
		this.effectType = spec.effectType != null ? spec.effectType : "";
		this.durationTicks = spec.durationTicks != null ? spec.durationTicks : 0;
		this.intensity = spec.intensity != null ? spec.intensity : 1.0;
		this.targetId = spec.targetId != null ? spec.targetId : 0;
		this.casterId = spec.casterId != null ? spec.casterId : 0;
	}
	,__class__: engine_model_entities_impl_EngineEffectEntity
});
var engine_model_managers_IEngineEntityManager = function() { };
engine_model_managers_IEngineEntityManager.__name__ = true;
engine_model_managers_IEngineEntityManager.__isInterface__ = true;
engine_model_managers_IEngineEntityManager.prototype = {
	__class__: engine_model_managers_IEngineEntityManager
};
var engine_model_managers_BaseEngineEntityManager = function(factory) {
	this.factory = factory;
	this.entities = new haxe_ds_IntMap();
	this.nextId = 1;
};
engine_model_managers_BaseEngineEntityManager.__name__ = true;
engine_model_managers_BaseEngineEntityManager.__interfaces__ = [engine_model_managers_IEngineEntityManager];
engine_model_managers_BaseEngineEntityManager.prototype = {
	create: function(spec) {
		var entity = this.factory.create(spec.type,spec);
		if(entity.id == 0) {
			entity.id = this.allocateId();
		}
		this.entities.h[entity.id] = entity;
		return entity;
	}
	,destroy: function(id) {
		if(this.entities.h.hasOwnProperty(id)) {
			var entity = this.entities.h[id];
			this.entities.remove(id);
			this.factory.release(entity);
		}
	}
	,find: function(id) {
		if(this.entities.h.hasOwnProperty(id)) {
			return this.entities.h[id];
		} else {
			return null;
		}
	}
	,iterate: function(fn) {
		var entity = this.entities.iterator();
		while(entity.hasNext()) fn(entity.next());
	}
	,updateTick: function(dt,tick,state) {
	}
	,saveMemento: function() {
		var result = [];
		var id = this.entities.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			result.push(this.entities.h[id1].serialize());
		}
		return result;
	}
	,restoreMemento: function(mementos) {
		this.clear();
		var _g = 0;
		while(_g < mementos.length) {
			var memento = mementos[_g];
			++_g;
			var entity = this.factory.create(memento.type,{ id : memento.id, type : memento.type, pos : memento.pos, vel : memento.vel, rotation : memento.rotation, ownerId : memento.ownerId, isAlive : memento.isAlive, maxHp : memento.maxHp, hp : memento.hp, level : memento.level, stats : memento.stats, attackDefs : memento.attackDefs, spellBook : memento.spellBook, aiProfile : memento.aiProfile, effectType : memento.effectType, duration : memento.duration, consumableType : memento.consumableType, quantity : memento.quantity});
			this.entities.h[entity.id] = entity;
		}
	}
	,clear: function() {
		var id = this.entities.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			this.factory.release(this.entities.h[id1]);
		}
		this.entities.h = { };
	}
	,allocateId: function() {
		return this.nextId++;
	}
	,__class__: engine_model_managers_BaseEngineEntityManager
};
var engine_model_managers_IEngineEntityManagerRegistry = function() { };
engine_model_managers_IEngineEntityManagerRegistry.__name__ = true;
engine_model_managers_IEngineEntityManagerRegistry.__isInterface__ = true;
engine_model_managers_IEngineEntityManagerRegistry.prototype = {
	__class__: engine_model_managers_IEngineEntityManagerRegistry
};
var engine_model_managers_EngineEntityManagerRegistry = function() {
	this.managers = new haxe_ds_StringMap();
};
engine_model_managers_EngineEntityManagerRegistry.__name__ = true;
engine_model_managers_EngineEntityManagerRegistry.__interfaces__ = [engine_model_managers_IEngineEntityManagerRegistry];
engine_model_managers_EngineEntityManagerRegistry.prototype = {
	register: function(type,manager) {
		this.managers.h[type] = manager;
	}
	,get: function(type) {
		return this.managers.h[type];
	}
	,getAll: function() {
		var result = [];
		var h = this.managers.h;
		var manager_keys = Object.keys(h);
		var manager_length = manager_keys.length;
		var manager_current = 0;
		while(manager_current < manager_length) result.push(h[manager_keys[manager_current++]]);
		return result;
	}
	,updateAll: function(dt,tick,state) {
		var h = this.managers.h;
		var manager_keys = Object.keys(h);
		var manager_length = manager_keys.length;
		var manager_current = 0;
		while(manager_current < manager_length) h[manager_keys[manager_current++]].updateTick(dt,tick,state);
	}
	,saveMemento: function() {
		var result = [];
		var type_keys = Object.keys(this.managers.h);
		var type_length = type_keys.length;
		var type_current = 0;
		while(type_current < type_length) {
			var type = type_keys[type_current++];
			result.push({ type : type, entities : this.managers.h[type].saveMemento()});
		}
		return result;
	}
	,restoreMemento: function(mementos) {
		this.clear();
		var _g = 0;
		while(_g < mementos.length) {
			var memento = mementos[_g];
			++_g;
			var manager = this.managers.h[memento.type];
			if(manager != null) {
				manager.restoreMemento(memento.entities);
			}
		}
	}
	,clear: function() {
		var type_keys = Object.keys(this.managers.h);
		var type_length = type_keys.length;
		var type_current = 0;
		while(type_current < type_length) this.managers.h[type_keys[type_current++]].clear();
	}
	,__class__: engine_model_managers_EngineEntityManagerRegistry
};
var engine_modules_IModule = function() { };
engine_modules_IModule.__name__ = true;
engine_modules_IModule.__isInterface__ = true;
engine_modules_IModule.prototype = {
	__class__: engine_modules_IModule
};
var engine_modules_AIModule = function() {
	this.aiProfiles = new haxe_ds_StringMap();
};
engine_modules_AIModule.__name__ = true;
engine_modules_AIModule.__interfaces__ = [engine_modules_IModule];
engine_modules_AIModule.prototype = {
	update: function(state,tick,dt) {
		var _gthis = this;
		if(tick % engine_NecrotonEngine.Config.aiUpdateInterval != 0) {
			return;
		}
		var _g = 0;
		var _g1 = state.managers.getAll();
		while(_g < _g1.length) _g1[_g++].iterate(function(entity) {
			if(entity.isAlive && entity.ownerId == "") {
				_gthis.updateEntityAI(entity,state,tick);
			}
		});
	}
	,shutdown: function() {
		this.aiProfiles.h = Object.create(null);
	}
	,registerProfile: function(profileName,behavior) {
		this.aiProfiles.h[profileName] = behavior;
	}
	,updateEntityAI: function(entity,state,tick) {
		if(entity.type == "character") {
			var character = js_Boot.__cast(entity , engine_model_entities_impl_EngineCharacterEntity);
			if(character.aiProfile != "" && Object.prototype.hasOwnProperty.call(this.aiProfiles.h,character.aiProfile)) {
				this.applyAIBehavior(character,this.aiProfiles.h[character.aiProfile],state);
			} else {
				this.wanderBehavior(character,state);
			}
		}
	}
	,applyAIBehavior: function(character,profile,state) {
	}
	,wanderBehavior: function(character,state) {
		if(state.rng.nextFloat() < 0.1) {
			var angle = state.rng.nextFloatRange(0,Math.PI * 2);
			character.vel = { x : Math.cos(angle) * 50.0, y : Math.sin(angle) * 50.0};
		}
	}
	,__class__: engine_modules_AIModule
};
var engine_modules_InputModule = function() {
	this.clientEntityMap = new haxe_ds_StringMap();
	this.inputBuffers = new haxe_ds_StringMap();
};
engine_modules_InputModule.__name__ = true;
engine_modules_InputModule.__interfaces__ = [engine_modules_IModule];
engine_modules_InputModule.prototype = {
	update: function(state,tick,dt) {
		var inputs = this.collectForTick(tick);
		if(inputs.length > 0) {
			this.applyInputs(inputs,state,dt);
		}
	}
	,shutdown: function() {
		this.inputBuffers.h = Object.create(null);
	}
	,queueInput: function(input) {
		if(!Object.prototype.hasOwnProperty.call(this.inputBuffers.h,input.clientId)) {
			this.inputBuffers.h[input.clientId] = new engine_presenter_InputBuffer();
		}
		this.inputBuffers.h[input.clientId].push(input);
	}
	,setClientEntity: function(clientId,entityId) {
		this.clientEntityMap.h[clientId] = entityId;
	}
	,collectForTick: function(tick) {
		var result = [];
		var clientId_keys = Object.keys(this.inputBuffers.h);
		var clientId_length = clientId_keys.length;
		var clientId_current = 0;
		while(clientId_current < clientId_length) result = result.concat(this.inputBuffers.h[clientId_keys[clientId_current++]].collectForTick(tick));
		return result;
	}
	,applyInputs: function(inputs,state,dt) {
		var characterManager = state.managers.get("character");
		var _g = 0;
		while(_g < inputs.length) {
			var input = inputs[_g];
			++_g;
			var entityId = this.clientEntityMap.h[input.clientId];
			if(entityId != null && characterManager != null) {
				var character = characterManager.find(entityId);
				if(character != null) {
					character.applyMovementStep(input.movement.x,input.movement.y,dt);
					var _g1 = 0;
					var _g2 = input.actions;
					while(_g1 < _g2.length) {
						var action = _g2[_g1];
						++_g1;
						switch(action.type) {
						case "ability":
							console.log("src/engine/modules/InputModule.hx:103:","Ability from " + input.clientId);
							break;
						case "primary_action":
							console.log("src/engine/modules/InputModule.hx:97:","Primary action from " + input.clientId);
							break;
						case "secondary_action":
							console.log("src/engine/modules/InputModule.hx:100:","Secondary action from " + input.clientId);
							break;
						default:
							console.log("src/engine/modules/InputModule.hx:106:","Unknown action: " + Std.string(action.type) + " from " + input.clientId);
						}
					}
				}
			}
		}
	}
	,dropAcknowledged: function(clientId,sequence) {
		if(Object.prototype.hasOwnProperty.call(this.inputBuffers.h,clientId)) {
			this.inputBuffers.h[clientId].dropUpToSequence(sequence);
		}
	}
	,__class__: engine_modules_InputModule
};
var engine_modules_ModuleRegistry = function() {
	this.modules = new haxe_ds_StringMap();
};
engine_modules_ModuleRegistry.__name__ = true;
engine_modules_ModuleRegistry.prototype = {
	register: function(name,module) {
		this.modules.h[name] = module;
	}
	,get: function(name) {
		if(Object.prototype.hasOwnProperty.call(this.modules.h,name)) {
			return this.modules.h[name];
		} else {
			return null;
		}
	}
	,getAll: function() {
		var result = [];
		var h = this.modules.h;
		var module_keys = Object.keys(h);
		var module_length = module_keys.length;
		var module_current = 0;
		while(module_current < module_length) result.push(h[module_keys[module_current++]]);
		return result;
	}
	,__class__: engine_modules_ModuleRegistry
};
var engine_modules_PhysicsModule = function() {
};
engine_modules_PhysicsModule.__name__ = true;
engine_modules_PhysicsModule.__interfaces__ = [engine_modules_IModule];
engine_modules_PhysicsModule.prototype = {
	update: function(state,tick,dt) {
		this.integrate(state,dt);
		this.stepCollision(state,tick);
	}
	,shutdown: function() {
	}
	,integrate: function(state,dt) {
		var _g = 0;
		var _g1 = state.managers.getAll();
		while(_g < _g1.length) _g1[_g++].iterate(function(entity) {
			if(entity.isAlive) {
				if(!entity.isInputDriven) {
					entity.pos = engine_geometry_Vec2Utils.add(entity.pos,engine_geometry_Vec2Utils.scale(entity.vel,dt));
				}
			}
		});
	}
	,stepCollision: function(state,tick) {
		var entities = [];
		var _g = 0;
		var _g1 = state.managers.getAll();
		while(_g < _g1.length) _g1[_g++].iterate(function(entity) {
			if(entity.isAlive) {
				entities.push(entity);
			}
		});
		var unitPixels = engine_NecrotonEngine.Config.unitPixels;
		var _g = 0;
		var _g1 = entities.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = i + 1;
			var _g3 = entities.length;
			while(_g2 < _g3) {
				var a = entities[i];
				var b = entities[_g2++];
				var maxDistanceX = (a.colliderWidth * unitPixels + b.colliderWidth * unitPixels) / 2;
				var maxDistanceY = (a.colliderHeight * unitPixels + b.colliderHeight * unitPixels) / 2;
				if(engine_geometry_Vec2Utils.distanceSquared(a.pos,b.pos) > maxDistanceX * maxDistanceX + maxDistanceY * maxDistanceY) {
					continue;
				}
				var collisionResult = this.checkCollision(a,b);
				if(collisionResult.intersects) {
					this.resolveCollision(collisionResult.rectA,a,collisionResult.rectB,b);
				}
			}
		}
	}
	,registerCollider: function(entity) {
	}
	,unregisterCollider: function(entityId) {
	}
	,checkCollision: function(a,b) {
		var unitPixels = engine_NecrotonEngine.Config.unitPixels;
		var rectA = engine_geometry_RectUtils.create(a.pos.x,a.pos.y,a.colliderWidth * unitPixels | 0,a.colliderHeight * unitPixels | 0);
		var rectB = engine_geometry_RectUtils.create(b.pos.x,b.pos.y,b.colliderWidth * unitPixels | 0,b.colliderHeight * unitPixels | 0);
		return { intersects : engine_geometry_RectUtils.intersectsRect(rectA,rectB), rectA : rectA, rectB : rectB};
	}
	,resolveCollision: function(rectA,entityA,rectB,entityB) {
		var aIsCollider = entityA.type == "collider";
		if(aIsCollider || entityB.type == "collider") {
			var collider = js_Boot.__cast(aIsCollider ? entityA : entityB , engine_model_entities_impl_EngineColliderEntity);
			var entity = aIsCollider ? entityB : entityA;
			if(!collider.passable) {
				entity.applyMovementCorrection(engine_geometry_RectUtils.getIntersectionDepth(rectA,rectB));
			}
			if(collider.isTrigger) {
				console.log("src/engine/modules/PhysicsModule.hx:161:","Collider trigger activated: " + collider.id + " by entity: " + entity.id);
			}
		}
	}
	,__class__: engine_modules_PhysicsModule
};
var engine_modules_SpawnModule = function() {
};
engine_modules_SpawnModule.__name__ = true;
engine_modules_SpawnModule.__interfaces__ = [engine_modules_IModule];
engine_modules_SpawnModule.prototype = {
	update: function(state,tick,dt) {
		this.cleanupDeadEntities(state);
	}
	,shutdown: function() {
	}
	,spawn: function(spec) {
		return null;
	}
	,despawn: function(entityId) {
	}
	,cleanupDeadEntities: function(state) {
		var _g = 0;
		var _g1 = state.managers.getAll();
		while(_g < _g1.length) {
			var manager = _g1[_g];
			++_g;
			var toRemove = [[]];
			manager.iterate((function(toRemove) {
				return function(entity) {
					if(!entity.isAlive) {
						toRemove[0].push(entity.id);
					}
				};
			})(toRemove));
			var _g2 = 0;
			while(_g2 < toRemove[0].length) manager.destroy(toRemove[0][_g2++]);
		}
	}
	,__class__: engine_modules_SpawnModule
};
var engine_presenter_GameLoop = function(state,modules,eventBus) {
	this.state = state;
	this.modules = modules;
	this.eventBus = eventBus;
	this.running = false;
	this.fixedDt = 1.0 / engine_NecrotonEngine.Config.tickRate;
};
engine_presenter_GameLoop.__name__ = true;
engine_presenter_GameLoop.prototype = {
	start: function() {
		this.running = true;
	}
	,stop: function() {
		this.running = false;
	}
	,stepFixed: function() {
		if(!this.running) {
			return;
		}
		this.state.tick++;
		var currentTick = this.state.tick;
		this.executeModules(currentTick,this.fixedDt);
		this.state.managers.updateAll(this.fixedDt,currentTick,this.state);
		this.eventBus.emit("tick:complete",{ tick : currentTick});
	}
	,executeModules: function(tick,dt) {
		var inputModule = js_Boot.__cast(this.modules.get("input") , engine_modules_InputModule);
		if(inputModule != null) {
			inputModule.update(this.state,tick,dt);
		}
		var aiModule = js_Boot.__cast(this.modules.get("ai") , engine_modules_AIModule);
		if(aiModule != null) {
			aiModule.update(this.state,tick,dt);
		}
		var physicsModule = js_Boot.__cast(this.modules.get("physics") , engine_modules_PhysicsModule);
		if(physicsModule != null) {
			physicsModule.update(this.state,tick,dt);
		}
		var spawnModule = js_Boot.__cast(this.modules.get("spawn") , engine_modules_SpawnModule);
		if(spawnModule != null) {
			spawnModule.update(this.state,tick,dt);
		}
	}
	,__class__: engine_presenter_GameLoop
};
var engine_presenter_InputBuffer = function() {
	this.inputs = [];
};
engine_presenter_InputBuffer.__name__ = true;
engine_presenter_InputBuffer.prototype = {
	push: function(input) {
		this.inputs.push(input);
		this.inputs.sort(function(a,b) {
			if(a.intendedServerTick != b.intendedServerTick) {
				return a.intendedServerTick - b.intendedServerTick;
			}
			return a.sequence - b.sequence;
		});
	}
	,collectForTick: function(tick) {
		var result = [];
		var toRemove = [];
		var _g = 0;
		var _g1 = this.inputs.length;
		while(_g < _g1) {
			var i = _g++;
			var input = this.inputs[i];
			if(input.intendedServerTick == tick) {
				result.push(input);
				toRemove.push(i);
			} else if(input.intendedServerTick > tick) {
				break;
			}
		}
		var i = toRemove.length - 1;
		while(i >= 0) {
			this.inputs.splice(toRemove[i],1);
			--i;
		}
		return result;
	}
	,dropUpToSequence: function(sequence) {
		var toRemove = [];
		var _g = 0;
		var _g1 = this.inputs.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.inputs[i].sequence <= sequence) {
				toRemove.push(i);
			}
		}
		var _g = toRemove.length - 1;
		while(_g < -1) this.inputs.splice(toRemove[_g++],1);
	}
	,__class__: engine_presenter_InputBuffer
};
var engine_presenter_SnapshotManager = function(maxSize) {
	this.maxSize = maxSize;
	this.snapshots = [];
	this.head = 0;
	this.count = 0;
};
engine_presenter_SnapshotManager.__name__ = true;
engine_presenter_SnapshotManager.prototype = {
	store: function(tick,memento) {
		var snapshot = { tick : tick, memento : memento};
		if(this.count < this.maxSize) {
			this.snapshots.push(snapshot);
			this.count++;
		} else {
			this.snapshots[this.head] = snapshot;
			this.head = (this.head + 1) % this.maxSize;
		}
	}
	,load: function(tick) {
		var _g = 0;
		var _g1 = this.snapshots;
		while(_g < _g1.length) {
			var snapshot = _g1[_g];
			++_g;
			if(snapshot.tick == tick) {
				return snapshot.memento;
			}
		}
		return null;
	}
	,latest: function() {
		if(this.count == 0) {
			return 0;
		}
		var latestTick = 0;
		var _g = 0;
		var _g1 = this.snapshots;
		while(_g < _g1.length) {
			var snapshot = _g1[_g];
			++_g;
			if(snapshot.tick > latestTick) {
				latestTick = snapshot.tick;
			}
		}
		return latestTick;
	}
	,purgeBefore: function(tick) {
		var toRemove = [];
		var _g = 0;
		var _g1 = this.snapshots.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.snapshots[i].tick < tick) {
				toRemove.push(i);
			}
		}
		var _g = toRemove.length - 1;
		while(_g < -1) {
			this.snapshots.splice(toRemove[_g++],1);
			this.count--;
		}
	}
	,__class__: engine_presenter_SnapshotManager
};
var engine_view_IEventBus = function() { };
engine_view_IEventBus.__name__ = true;
engine_view_IEventBus.__isInterface__ = true;
engine_view_IEventBus.prototype = {
	__class__: engine_view_IEventBus
};
var engine_view_EventBus = function() {
	this.subscribers = new haxe_ds_StringMap();
	this.nextToken = 1;
	this.eventQueue = [];
	this.isProcessing = false;
};
engine_view_EventBus.__name__ = true;
engine_view_EventBus.__interfaces__ = [engine_view_IEventBus];
engine_view_EventBus.prototype = {
	subscribe: function(topic,handler) {
		if(!Object.prototype.hasOwnProperty.call(this.subscribers.h,topic)) {
			this.subscribers.h[topic] = [];
		}
		var token = this.nextToken++;
		var dynamicHandler = function(payload) {
			handler(payload);
		};
		this.subscribers.h[topic].push({ token : token, handler : dynamicHandler});
		return token;
	}
	,subscribeDynamic: function(topic,handler) {
		if(!Object.prototype.hasOwnProperty.call(this.subscribers.h,topic)) {
			this.subscribers.h[topic] = [];
		}
		var token = this.nextToken++;
		this.subscribers.h[topic].push({ token : token, handler : handler});
		return token;
	}
	,unsubscribe: function(token) {
		var topic_keys = Object.keys(this.subscribers.h);
		var topic_length = topic_keys.length;
		var topic_current = 0;
		while(topic_current < topic_length) {
			var subs = this.subscribers.h[topic_keys[topic_current++]];
			var _g = 0;
			var _g1 = subs.length;
			while(_g < _g1) {
				var i = _g++;
				if(subs[i].token == token) {
					subs.splice(i,1);
					return;
				}
			}
		}
	}
	,emit: function(topic,payload) {
		this.eventQueue.push({ topic : topic, payload : payload});
		if(!this.isProcessing) {
			this.processEventQueue();
		}
	}
	,processEventQueue: function() {
		this.isProcessing = true;
		while(this.eventQueue.length > 0) {
			var event = this.eventQueue.shift();
			var subs = this.subscribers.h[event.topic];
			if(subs != null) {
				var handlers = subs.slice();
				var _g = 0;
				while(_g < handlers.length) {
					var sub = handlers[_g++];
					try {
						sub.handler(event.payload);
					} catch( _g1 ) {
						console.log("src/engine/view/EventBus.hx:80:","Event handler error: " + Std.string(haxe_Exception.caught(_g1).unwrap()));
					}
				}
			}
		}
		this.isProcessing = false;
	}
	,__class__: engine_view_EventBus
};
var engine_view_EventBusConstants = function() { };
engine_view_EventBusConstants.__name__ = true;
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	while(true) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		var intf = cc.__interfaces__;
		if(intf != null) {
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = intf[_g++];
				if(i == cl || js_Boot.__interfLoop(i,cl)) {
					return true;
				}
			}
		}
		cc = cc.__super__;
	}
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
engine_view_EventBusConstants.ENTITY_SPAWN = "entity:spawn";
engine_view_EventBusConstants.ENTITY_DEATH = "entity:death";
engine_view_EventBusConstants.ENTITY_MOVE = "entity:move";
engine_view_EventBusConstants.ENTITY_CORRECTION = "entity:correction";
engine_view_EventBusConstants.ENTITY_DAMAGE = "entity:damage";
engine_view_EventBusConstants.ENTITY_COLLISION = "entity:collision";
engine_view_EventBusConstants.TICK_COMPLETE = "tick:complete";
engine_view_EventBusConstants.SNAPSHOT = "snapshot";
engine_view_EventBusConstants.PHYSICS_CONTACT = "physics:contact";
engine_view_EventBusConstants.COLLIDER_TRIGGER = "collider:trigger";
engine_view_EventBusConstants.ACTION_INTENT = "action:intent";
engine_view_EventBusConstants.ACTION_RESOLVED = "action:resolved";
engine_NecrotonEngine.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=engine.js.map